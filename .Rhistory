})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
a<-c(SAMP_IND3,SAMP_IND3)
a
a |> fee()
a |> fee() |> View()
a |> map(fee) |> View()
a |> map(fee)
map(a,fee)
a
names(a)
map(a,fee)
fee(SAMP_IND3)
a<-list(SAMP_IND3,SAMP_IND3)
map(a,fee)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
filelist<-list(input$file1$datapath,input$file2$datapath)
df_list <- map(filelist,~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
data() |> head()
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
data() |> head()
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
data() |> map(head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
data() |> map(head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
data() |> map(head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-data.frame(as.list(input$file1$datapath,input$file2$datapath)) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) #|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
fee<-function(x){
x$urbanity<-substr(x[1],5,5) |> stringi::stri_replace_all_regex(pattern=seq(1:2),replacement= code$urbanity,vectorize_all = F)
# x$ownership<-substr(x$V1,6,6) |> stringi::stri_replace_all_regex(pattern=seq(1:3),replacement= code$ownership,vectorize_all = F)
# x$housetype<-substr(x$V1,7,7) |> stringi::stri_replace_all_regex(pattern=seq(1:4),replacement= na.omit(code$house_type),vectorize_all = F)
# x$electricity<-substr(x$V1,8,8) |> stringi::stri_replace_all_regex(pattern=seq(1:2),replacement= na.omit(code$electricity),vectorize_all = F)
# x$drinkingwater<-substr(x$V1,9,9)|> stringi::stri_replace_all_regex(pattern=seq(1:2),replacement= na.omit(code$drinking),vectorize_all = F)
# x$serialnumber<-substr(x$V1,10,10)
# x$floor<-substr(x$V1,11,11) |> stringi::stri_replace_all_regex(pattern=seq(1:7),replacement= na.omit(code$floor),vectorize_all = F)
# x$wall<-substr(x$V1,12,12) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$wall),vectorize_all = F)
# x$roof<-substr(x$V1,13,13) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$roof),vectorize_all = F)
# x$purposes<-substr(x$V1,14,14) |> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$purpose),vectorize_all = F)
# x$condition<-substr(x$V1,15,15)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$condition),vectorize_all = F)
# x$caste<-substr(x$V1,16,16) |> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$caste),vectorize_all = F)
# x$dwellingrooms<-substr(x$V1,17,18) |> stringi::stri_replace_all_regex(pattern= sprintf('%0.2d', 6:99),replacement= "6 or more rooms",vectorize_all = F)
# x$couples<-substr(x$V1,19,20)|> stringi::stri_replace_all_regex(pattern= sprintf('%0.2d', 5:99),replacement= "5 or more couples",vectorize_all = F)
# x$watersource<-substr(x$V1,21,21)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$watersource),vectorize_all = F)
# x$waterpremises<-substr(x$V1,22,22)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$watersource),vectorize_all = F)
# x$lightsource<-substr(x$V1,23,23)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6),replacement= na.omit(code$lightsource),vectorize_all = F)
# x$latrine<-substr(x$V1,24,24)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$latrine),vectorize_all = F)
# x$wastewater<-substr(x$V1,25,25)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$wastewater),vectorize_all = F)
# x$bathroom<-substr(x$V1,26,26)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$bathroom),vectorize_all = F)
# x$kitchen<-substr(x$V1,27,27) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5),replacement= na.omit(code$kitchen),vectorize_all = F)
# x$fuel<-substr(x$V1,28,28) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$fuel),vectorize_all = F)
# x$radiotransisor<-substr(x$V1,29,29) |> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$radiotransistor),vectorize_all = F)
# x$tv<-substr(x$V1,30,30) |> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$tv),vectorize_all = F)
# x$computerinternet<-substr(x$V1,31,31)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$computerinternet),vectorize_all = F)
# x$phone<-substr(x$V1,32,32)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4),replacement= na.omit(code$phone),vectorize_all = F)
# x$cycle<-substr(x$V1,33,33)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$cycle),vectorize_all = F)
# x$twowheeler<-substr(x$V1,34,34)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$twowheeler),vectorize_all = F)
# x$fourwheeler<-substr(x$V1,35,35)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$fourwheeler),vectorize_all = F)
# x$bank<-substr(x$V1,36,36)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$bank),vectorize_all = F)
# x$weight<-substr(x$V1,37,39)
# x$samplingrate<-substr(x$V1,40,42)
# x$V1<-NULL
# x$serialnumber<-NULL
# x$samplingrate<-NULL
# x$weight<-NULL
# x$dwellingrooms<-NULL
x<-print(x)
}
fee
fee(SAMP_IND3)
fee<-function(x){
x$urbanity<-substr(x[1],5,5) |> stringi::stri_replace_all_regex(pattern=seq(1:2),replacement= code$urbanity,vectorize_all = F)
x$ownership<-substr(x[1],6,6) |> stringi::stri_replace_all_regex(pattern=seq(1:3),replacement= code$ownership,vectorize_all = F)
x$housetype<-substr(x[1],7,7) |> stringi::stri_replace_all_regex(pattern=seq(1:4),replacement= na.omit(code$house_type),vectorize_all = F)
x$electricity<-substr(x[1],8,8) |> stringi::stri_replace_all_regex(pattern=seq(1:2),replacement= na.omit(code$electricity),vectorize_all = F)
x$drinkingwater<-substr(x[1],9,9)|> stringi::stri_replace_all_regex(pattern=seq(1:2),replacement= na.omit(code$drinking),vectorize_all = F)
x$serialnumber<-substr(x[1],10,10)
x$floor<-substr(x[1],11,11) |> stringi::stri_replace_all_regex(pattern=seq(1:7),replacement= na.omit(code$floor),vectorize_all = F)
x$wall<-substr(x[1],12,12) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$wall),vectorize_all = F)
x$roof<-substr(x[1],13,13) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$roof),vectorize_all = F)
x$purposes<-substr(x[1],14,14) |> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$purpose),vectorize_all = F)
x$condition<-substr(x[1],15,15)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$condition),vectorize_all = F)
x$caste<-substr(x[1],16,16) |> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$caste),vectorize_all = F)
x$dwellingrooms<-substr(x[1],17,18) |> stringi::stri_replace_all_regex(pattern= sprintf('%0.2d', 6:99),replacement= "6 or more rooms",vectorize_all = F)
x$couples<-substr(x[1],19,20)|> stringi::stri_replace_all_regex(pattern= sprintf('%0.2d', 5:99),replacement= "5 or more couples",vectorize_all = F)
x$watersource<-substr(x[1],21,21)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$watersource),vectorize_all = F)
x$waterpremises<-substr(x[1],22,22)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$watersource),vectorize_all = F)
x$lightsource<-substr(x[1],23,23)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6),replacement= na.omit(code$lightsource),vectorize_all = F)
x$latrine<-substr(x[1],24,24)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$latrine),vectorize_all = F)
x$wastewater<-substr(x[1],25,25)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$wastewater),vectorize_all = F)
x$bathroom<-substr(x[1],26,26)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$bathroom),vectorize_all = F)
x$kitchen<-substr(x[1],27,27) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5),replacement= na.omit(code$kitchen),vectorize_all = F)
x$fuel<-substr(x[1],28,28) |> stringi::stri_replace_all_regex(pattern=c(1,2,3,4,5,6,7,8,9,0),replacement= na.omit(code$fuel),vectorize_all = F)
x$radiotransisor<-substr(x[1],29,29) |> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$radiotransistor),vectorize_all = F)
x$tv<-substr(x[1],30,30) |> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$tv),vectorize_all = F)
x$computerinternet<-substr(x[1],31,31)|> stringi::stri_replace_all_regex(pattern=c(1,2,3),replacement= na.omit(code$computerinternet),vectorize_all = F)
x$phone<-substr(x[1],32,32)|> stringi::stri_replace_all_regex(pattern=c(1,2,3,4),replacement= na.omit(code$phone),vectorize_all = F)
x$cycle<-substr(x[1],33,33)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$cycle),vectorize_all = F)
x$twowheeler<-substr(x[1],34,34)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$twowheeler),vectorize_all = F)
x$fourwheeler<-substr(x[1],35,35)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$fourwheeler),vectorize_all = F)
x$bank<-substr(x[1],36,36)|> stringi::stri_replace_all_regex(pattern=c(1,2),replacement= na.omit(code$bank),vectorize_all = F)
x$weight<-substr(x[1],37,39)
x$samplingrate<-substr(x[1],40,42)
x[1]<-NULL
x$serialnumber<-NULL
x$samplingrate<-NULL
x$weight<-NULL
x$dwellingrooms<-NULL
x<-print(x)
}
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
fee(SAMP_IND3)
fee(SAMP_IND3)
View(fee(SAMP_IND3))
map(list(SAMP_IND3,SAMP_IND3),fee)
map(list(SAMP_IND3,SAMP_IND3),fee) |> View()
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
data <- reactive({
a<-list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee)
#|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
map(data(),head)
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
r1 <- reactive({
a<-list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee) |> map(head)
#|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
r1()
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
r1 <- reactive({
as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee) |> map(head)
#|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
r1()
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
.
library(shiny)
# Define the user interface
ui <- fluidPage(
# Add 5 file input widgets
fileInput("file1", "File 1"),
fileInput("file2", "File 2"),
tableOutput("x")
)
# Define the server logic``
server <- function(input, output) {
# Create a reactive expression that reads the uploaded files and saves them as a list of dataframes
r1 <- reactive({
as.list(input$file1$datapath,input$file2$datapath) |> map(~read.csv(.,header = F)) |> map(fee) |> map(head)
#|> map(fee)
#a <- read.csv(input$file1$datapath,header = F)
#      file2 = read.csv(input$file2$datapath)) #|>
})
# Create an observer that displays the head of the list of dataframes when the submit button is clicked
output$x<-renderTable({
r1()
#data.frame(map(data(),fee))
#data() |> map(fee) |> head()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
